
#include "mip_python.hpp"

#include <mip/definitions/commands_3dm.hpp>

#include <pybind11/pybind11.h>


namespace py = pybind11;
using namespace mip;
using namespace mip::commands_3dm;


void bind_commands_3dm(py::module_& m)
{
    m.def("pollImuMessage",                           [](Device& device, bool suppressAck, uint8_t numDescriptors, const DescriptorRate* descriptors)->FullResult{ return pollImuMessage(device, suppressAck, numDescriptors, descriptors); });
    m.def("pollGnssMessage",                          [](Device& device, bool suppressAck, uint8_t numDescriptors, const DescriptorRate* descriptors)->FullResult{ return pollGnssMessage(device, suppressAck, numDescriptors, descriptors); });
    m.def("pollFilterMessage",                        [](Device& device, bool suppressAck, uint8_t numDescriptors, const DescriptorRate* descriptors)->FullResult{ return pollFilterMessage(device, suppressAck, numDescriptors, descriptors); });
    m.def("writeImuMessageFormat",                    [](Device& device, uint8_t numDescriptors, const DescriptorRate* descriptors)->FullResult{ return writeImuMessageFormat(device, numDescriptors, descriptors); });
    m.def("readImuMessageFormat",                     [](Device& device, uint8_t* numDescriptorsOut, uint8_t numDescriptorsOutMax, DescriptorRate* descriptorsOut)->FullResult{ return readImuMessageFormat(device, numDescriptorsOut, numDescriptorsOutMax, descriptorsOut); });
    m.def("saveImuMessageFormat",                     [](Device& device)->FullResult{ return saveImuMessageFormat(device); });
    m.def("loadImuMessageFormat",                     [](Device& device)->FullResult{ return loadImuMessageFormat(device); });
    m.def("defaultImuMessageFormat",                  [](Device& device)->FullResult{ return defaultImuMessageFormat(device); });
    m.def("writeGpsMessageFormat",                    [](Device& device, uint8_t numDescriptors, const DescriptorRate* descriptors)->FullResult{ return writeGpsMessageFormat(device, numDescriptors, descriptors); });
    m.def("readGpsMessageFormat",                     [](Device& device, uint8_t* numDescriptorsOut, uint8_t numDescriptorsOutMax, DescriptorRate* descriptorsOut)->FullResult{ return readGpsMessageFormat(device, numDescriptorsOut, numDescriptorsOutMax, descriptorsOut); });
    m.def("saveGpsMessageFormat",                     [](Device& device)->FullResult{ return saveGpsMessageFormat(device); });
    m.def("loadGpsMessageFormat",                     [](Device& device)->FullResult{ return loadGpsMessageFormat(device); });
    m.def("defaultGpsMessageFormat",                  [](Device& device)->FullResult{ return defaultGpsMessageFormat(device); });
    m.def("writeFilterMessageFormat",                 [](Device& device, uint8_t numDescriptors, const DescriptorRate* descriptors)->FullResult{ return writeFilterMessageFormat(device, numDescriptors, descriptors); });
    m.def("readFilterMessageFormat",                  [](Device& device, uint8_t* numDescriptorsOut, uint8_t numDescriptorsOutMax, DescriptorRate* descriptorsOut)->FullResult{ return readFilterMessageFormat(device, numDescriptorsOut, numDescriptorsOutMax, descriptorsOut); });
    m.def("saveFilterMessageFormat",                  [](Device& device)->FullResult{ return saveFilterMessageFormat(device); });
    m.def("loadFilterMessageFormat",                  [](Device& device)->FullResult{ return loadFilterMessageFormat(device); });
    m.def("defaultFilterMessageFormat",               [](Device& device)->FullResult{ return defaultFilterMessageFormat(device); });
    m.def("imuGetBaseRate",                           [](Device& device, uint16_t* rateOut)->FullResult{ return imuGetBaseRate(device, rateOut); });
    m.def("gpsGetBaseRate",                           [](Device& device, uint16_t* rateOut)->FullResult{ return gpsGetBaseRate(device, rateOut); });
    m.def("filterGetBaseRate",                        [](Device& device, uint16_t* rateOut)->FullResult{ return filterGetBaseRate(device, rateOut); });
    m.def("pollData",                                 [](Device& device, uint8_t descSet, bool suppressAck, uint8_t numDescriptors, const uint8_t* descriptors)->FullResult{ return pollData(device, descSet, suppressAck, numDescriptors, descriptors); });
    m.def("getBaseRate",                              [](Device& device, uint8_t descSet, uint16_t* rateOut)->FullResult{ return getBaseRate(device, descSet, rateOut); });
    m.def("writeMessageFormat",                       [](Device& device, uint8_t descSet, uint8_t numDescriptors, const DescriptorRate* descriptors)->FullResult{ return writeMessageFormat(device, descSet, numDescriptors, descriptors); });
    m.def("readMessageFormat",                        [](Device& device, uint8_t descSet, uint8_t* numDescriptorsOut, uint8_t numDescriptorsOutMax, DescriptorRate* descriptorsOut)->FullResult{ return readMessageFormat(device, descSet, numDescriptorsOut, numDescriptorsOutMax, descriptorsOut); });
    m.def("saveMessageFormat",                        [](Device& device, uint8_t descSet)->FullResult{ return saveMessageFormat(device, descSet); });
    m.def("loadMessageFormat",                        [](Device& device, uint8_t descSet)->FullResult{ return loadMessageFormat(device, descSet); });
    m.def("defaultMessageFormat",                     [](Device& device, uint8_t descSet)->FullResult{ return defaultMessageFormat(device, descSet); });
    m.def("nmeaPollData",                             [](Device& device, bool suppressAck, uint8_t count, const NmeaMessage* formatEntries)->FullResult{ return nmeaPollData(device, suppressAck, count, formatEntries); });
    m.def("writeNmeaMessageFormat",                   [](Device& device, uint8_t count, const NmeaMessage* formatEntries)->FullResult{ return writeNmeaMessageFormat(device, count, formatEntries); });
    m.def("readNmeaMessageFormat",                    [](Device& device, uint8_t* countOut, uint8_t countOutMax, NmeaMessage* formatEntriesOut)->FullResult{ return readNmeaMessageFormat(device, countOut, countOutMax, formatEntriesOut); });
    m.def("saveNmeaMessageFormat",                    [](Device& device)->FullResult{ return saveNmeaMessageFormat(device); });
    m.def("loadNmeaMessageFormat",                    [](Device& device)->FullResult{ return loadNmeaMessageFormat(device); });
    m.def("defaultNmeaMessageFormat",                 [](Device& device)->FullResult{ return defaultNmeaMessageFormat(device); });
    m.def("saveDeviceSettings",                       [](Device& device)->FullResult{ return saveDeviceSettings(device); });
    m.def("loadDeviceSettings",                       [](Device& device)->FullResult{ return loadDeviceSettings(device); });
    m.def("defaultDeviceSettings",                    [](Device& device)->FullResult{ return defaultDeviceSettings(device); });
    m.def("writeUartBaudrate",                        [](Device& device, uint32_t baud)->FullResult{ return writeUartBaudrate(device, baud); });
    m.def("readUartBaudrate",                         [](Device& device, uint32_t* baudOut)->FullResult{ return readUartBaudrate(device, baudOut); });
    m.def("saveUartBaudrate",                         [](Device& device)->FullResult{ return saveUartBaudrate(device); });
    m.def("loadUartBaudrate",                         [](Device& device)->FullResult{ return loadUartBaudrate(device); });
    m.def("defaultUartBaudrate",                      [](Device& device)->FullResult{ return defaultUartBaudrate(device); });
    m.def("factoryStreaming",                         [](Device& device, FactoryStreaming::Action action, uint8_t reserved)->FullResult{ return factoryStreaming(device, action, reserved); });
    m.def("writeDatastreamControl",                   [](Device& device, uint8_t descSet, bool enable)->FullResult{ return writeDatastreamControl(device, descSet, enable); });
    m.def("readDatastreamControl",                    [](Device& device, uint8_t descSet, bool* enabledOut)->FullResult{ return readDatastreamControl(device, descSet, enabledOut); });
    m.def("saveDatastreamControl",                    [](Device& device, uint8_t descSet)->FullResult{ return saveDatastreamControl(device, descSet); });
    m.def("loadDatastreamControl",                    [](Device& device, uint8_t descSet)->FullResult{ return loadDatastreamControl(device, descSet); });
    m.def("defaultDatastreamControl",                 [](Device& device, uint8_t descSet)->FullResult{ return defaultDatastreamControl(device, descSet); });
    m.def("writeConstellationSettings",               [](Device& device, uint16_t maxChannels, uint8_t configCount, const ConstellationSettings::Settings* settings)->FullResult{ return writeConstellationSettings(device, maxChannels, configCount, settings); });
    m.def("readConstellationSettings",                [](Device& device, uint16_t* maxChannelsAvailableOut, uint16_t* maxChannelsUseOut, uint8_t* configCountOut, uint8_t configCountOutMax, ConstellationSettings::Settings* settingsOut)->FullResult{ return readConstellationSettings(device, maxChannelsAvailableOut, maxChannelsUseOut, configCountOut, configCountOutMax, settingsOut); });
    m.def("saveConstellationSettings",                [](Device& device)->FullResult{ return saveConstellationSettings(device); });
    m.def("loadConstellationSettings",                [](Device& device)->FullResult{ return loadConstellationSettings(device); });
    m.def("defaultConstellationSettings",             [](Device& device)->FullResult{ return defaultConstellationSettings(device); });
    m.def("writeGnssSbasSettings",                    [](Device& device, uint8_t enableSbas, GnssSbasSettings::SBASOptions sbasOptions, uint8_t numIncludedPrns, const uint16_t* includedPrns)->FullResult{ return writeGnssSbasSettings(device, enableSbas, sbasOptions, numIncludedPrns, includedPrns); });
    m.def("readGnssSbasSettings",                     [](Device& device, uint8_t* enableSbasOut, GnssSbasSettings::SBASOptions* sbasOptionsOut, uint8_t* numIncludedPrnsOut, uint8_t numIncludedPrnsOutMax, uint16_t* includedPrnsOut)->FullResult{ return readGnssSbasSettings(device, enableSbasOut, sbasOptionsOut, numIncludedPrnsOut, numIncludedPrnsOutMax, includedPrnsOut); });
    m.def("saveGnssSbasSettings",                     [](Device& device)->FullResult{ return saveGnssSbasSettings(device); });
    m.def("loadGnssSbasSettings",                     [](Device& device)->FullResult{ return loadGnssSbasSettings(device); });
    m.def("defaultGnssSbasSettings",                  [](Device& device)->FullResult{ return defaultGnssSbasSettings(device); });
    m.def("writeGnssAssistedFix",                     [](Device& device, GnssAssistedFix::AssistedFixOption option, uint8_t flags)->FullResult{ return writeGnssAssistedFix(device, option, flags); });
    m.def("readGnssAssistedFix",                      [](Device& device, GnssAssistedFix::AssistedFixOption* optionOut, uint8_t* flagsOut)->FullResult{ return readGnssAssistedFix(device, optionOut, flagsOut); });
    m.def("saveGnssAssistedFix",                      [](Device& device)->FullResult{ return saveGnssAssistedFix(device); });
    m.def("loadGnssAssistedFix",                      [](Device& device)->FullResult{ return loadGnssAssistedFix(device); });
    m.def("defaultGnssAssistedFix",                   [](Device& device)->FullResult{ return defaultGnssAssistedFix(device); });
    m.def("writeGnssTimeAssistance",                  [](Device& device, double tow, uint16_t weekNumber, float accuracy)->FullResult{ return writeGnssTimeAssistance(device, tow, weekNumber, accuracy); });
    m.def("readGnssTimeAssistance",                   [](Device& device, double* towOut, uint16_t* weekNumberOut, float* accuracyOut)->FullResult{ return readGnssTimeAssistance(device, towOut, weekNumberOut, accuracyOut); });
    m.def("writeImuLowpassFilter",                    [](Device& device, uint8_t targetDescriptor, bool enable, bool manual, uint16_t frequency, uint8_t reserved)->FullResult{ return writeImuLowpassFilter(device, targetDescriptor, enable, manual, frequency, reserved); });
    m.def("readImuLowpassFilter",                     [](Device& device, uint8_t targetDescriptor, bool* enableOut, bool* manualOut, uint16_t* frequencyOut, uint8_t* reservedOut)->FullResult{ return readImuLowpassFilter(device, targetDescriptor, enableOut, manualOut, frequencyOut, reservedOut); });
    m.def("saveImuLowpassFilter",                     [](Device& device, uint8_t targetDescriptor)->FullResult{ return saveImuLowpassFilter(device, targetDescriptor); });
    m.def("loadImuLowpassFilter",                     [](Device& device, uint8_t targetDescriptor)->FullResult{ return loadImuLowpassFilter(device, targetDescriptor); });
    m.def("defaultImuLowpassFilter",                  [](Device& device, uint8_t targetDescriptor)->FullResult{ return defaultImuLowpassFilter(device, targetDescriptor); });
    m.def("writePpsSource",                           [](Device& device, PpsSource::Source source)->FullResult{ return writePpsSource(device, source); });
    m.def("readPpsSource",                            [](Device& device, PpsSource::Source* sourceOut)->FullResult{ return readPpsSource(device, sourceOut); });
    m.def("savePpsSource",                            [](Device& device)->FullResult{ return savePpsSource(device); });
    m.def("loadPpsSource",                            [](Device& device)->FullResult{ return loadPpsSource(device); });
    m.def("defaultPpsSource",                         [](Device& device)->FullResult{ return defaultPpsSource(device); });
    m.def("writeGpioConfig",                          [](Device& device, uint8_t pin, GpioConfig::Feature feature, GpioConfig::Behavior behavior, GpioConfig::PinMode pinMode)->FullResult{ return writeGpioConfig(device, pin, feature, behavior, pinMode); });
    m.def("readGpioConfig",                           [](Device& device, uint8_t pin, GpioConfig::Feature* featureOut, GpioConfig::Behavior* behaviorOut, GpioConfig::PinMode* pinModeOut)->FullResult{ return readGpioConfig(device, pin, featureOut, behaviorOut, pinModeOut); });
    m.def("saveGpioConfig",                           [](Device& device, uint8_t pin)->FullResult{ return saveGpioConfig(device, pin); });
    m.def("loadGpioConfig",                           [](Device& device, uint8_t pin)->FullResult{ return loadGpioConfig(device, pin); });
    m.def("defaultGpioConfig",                        [](Device& device, uint8_t pin)->FullResult{ return defaultGpioConfig(device, pin); });
    m.def("writeGpioState",                           [](Device& device, uint8_t pin, bool state)->FullResult{ return writeGpioState(device, pin, state); });
    m.def("readGpioState",                            [](Device& device, uint8_t pin, bool* stateOut)->FullResult{ return readGpioState(device, pin, stateOut); });
    m.def("writeOdometer",                            [](Device& device, Odometer::Mode mode, float scaling, float uncertainty)->FullResult{ return writeOdometer(device, mode, scaling, uncertainty); });
    m.def("readOdometer",                             [](Device& device, Odometer::Mode* modeOut, float* scalingOut, float* uncertaintyOut)->FullResult{ return readOdometer(device, modeOut, scalingOut, uncertaintyOut); });
    m.def("saveOdometer",                             [](Device& device)->FullResult{ return saveOdometer(device); });
    m.def("loadOdometer",                             [](Device& device)->FullResult{ return loadOdometer(device); });
    m.def("defaultOdometer",                          [](Device& device)->FullResult{ return defaultOdometer(device); });
    m.def("getEventSupport",                          [](Device& device, GetEventSupport::Query query, uint8_t* maxInstancesOut, uint8_t* numEntriesOut, uint8_t numEntriesOutMax, GetEventSupport::Info* entriesOut)->FullResult{ return getEventSupport(device, query, maxInstancesOut, numEntriesOut, numEntriesOutMax, entriesOut); });
    m.def("writeEventControl",                        [](Device& device, uint8_t instance, EventControl::Mode mode)->FullResult{ return writeEventControl(device, instance, mode); });
    m.def("readEventControl",                         [](Device& device, uint8_t instance, EventControl::Mode* modeOut)->FullResult{ return readEventControl(device, instance, modeOut); });
    m.def("saveEventControl",                         [](Device& device, uint8_t instance)->FullResult{ return saveEventControl(device, instance); });
    m.def("loadEventControl",                         [](Device& device, uint8_t instance)->FullResult{ return loadEventControl(device, instance); });
    m.def("defaultEventControl",                      [](Device& device, uint8_t instance)->FullResult{ return defaultEventControl(device, instance); });
    m.def("getEventTriggerStatus",                    [](Device& device, uint8_t requestedCount, const uint8_t* requestedInstances, uint8_t* countOut, uint8_t countOutMax, GetEventTriggerStatus::Entry* triggersOut)->FullResult{ return getEventTriggerStatus(device, requestedCount, requestedInstances, countOut, countOutMax, triggersOut); });
    m.def("getEventActionStatus",                     [](Device& device, uint8_t requestedCount, const uint8_t* requestedInstances, uint8_t* countOut, uint8_t countOutMax, GetEventActionStatus::Entry* actionsOut)->FullResult{ return getEventActionStatus(device, requestedCount, requestedInstances, countOut, countOutMax, actionsOut); });
    m.def("writeEventTrigger",                        [](Device& device, uint8_t instance, EventTrigger::Type type, const EventTrigger::Parameters& parameters)->FullResult{ return writeEventTrigger(device, instance, type, parameters); });
    m.def("readEventTrigger",                         [](Device& device, uint8_t instance, EventTrigger::Type* typeOut, EventTrigger::Parameters* parametersOut)->FullResult{ return readEventTrigger(device, instance, typeOut, parametersOut); });
    m.def("saveEventTrigger",                         [](Device& device, uint8_t instance)->FullResult{ return saveEventTrigger(device, instance); });
    m.def("loadEventTrigger",                         [](Device& device, uint8_t instance)->FullResult{ return loadEventTrigger(device, instance); });
    m.def("defaultEventTrigger",                      [](Device& device, uint8_t instance)->FullResult{ return defaultEventTrigger(device, instance); });
    m.def("writeEventAction",                         [](Device& device, uint8_t instance, uint8_t trigger, EventAction::Type type, const EventAction::Parameters& parameters)->FullResult{ return writeEventAction(device, instance, trigger, type, parameters); });
    m.def("readEventAction",                          [](Device& device, uint8_t instance, uint8_t* triggerOut, EventAction::Type* typeOut, EventAction::Parameters* parametersOut)->FullResult{ return readEventAction(device, instance, triggerOut, typeOut, parametersOut); });
    m.def("saveEventAction",                          [](Device& device, uint8_t instance)->FullResult{ return saveEventAction(device, instance); });
    m.def("loadEventAction",                          [](Device& device, uint8_t instance)->FullResult{ return loadEventAction(device, instance); });
    m.def("defaultEventAction",                       [](Device& device, uint8_t instance)->FullResult{ return defaultEventAction(device, instance); });
    m.def("writeAccelBias",                           [](Device& device, const float* bias)->FullResult{ return writeAccelBias(device, bias); });
    m.def("readAccelBias",                            [](Device& device, float* biasOut)->FullResult{ return readAccelBias(device, biasOut); });
    m.def("saveAccelBias",                            [](Device& device)->FullResult{ return saveAccelBias(device); });
    m.def("loadAccelBias",                            [](Device& device)->FullResult{ return loadAccelBias(device); });
    m.def("defaultAccelBias",                         [](Device& device)->FullResult{ return defaultAccelBias(device); });
    m.def("writeGyroBias",                            [](Device& device, const float* bias)->FullResult{ return writeGyroBias(device, bias); });
    m.def("readGyroBias",                             [](Device& device, float* biasOut)->FullResult{ return readGyroBias(device, biasOut); });
    m.def("saveGyroBias",                             [](Device& device)->FullResult{ return saveGyroBias(device); });
    m.def("loadGyroBias",                             [](Device& device)->FullResult{ return loadGyroBias(device); });
    m.def("defaultGyroBias",                          [](Device& device)->FullResult{ return defaultGyroBias(device); });
    m.def("captureGyroBias",                          [](Device& device, uint16_t averagingTimeMs, float* biasOut)->FullResult{ return captureGyroBias(device, averagingTimeMs, biasOut); });
    m.def("writeMagHardIronOffset",                   [](Device& device, const float* offset)->FullResult{ return writeMagHardIronOffset(device, offset); });
    m.def("readMagHardIronOffset",                    [](Device& device, float* offsetOut)->FullResult{ return readMagHardIronOffset(device, offsetOut); });
    m.def("saveMagHardIronOffset",                    [](Device& device)->FullResult{ return saveMagHardIronOffset(device); });
    m.def("loadMagHardIronOffset",                    [](Device& device)->FullResult{ return loadMagHardIronOffset(device); });
    m.def("defaultMagHardIronOffset",                 [](Device& device)->FullResult{ return defaultMagHardIronOffset(device); });
    m.def("writeMagSoftIronMatrix",                   [](Device& device, const float* offset)->FullResult{ return writeMagSoftIronMatrix(device, offset); });
    m.def("readMagSoftIronMatrix",                    [](Device& device, float* offsetOut)->FullResult{ return readMagSoftIronMatrix(device, offsetOut); });
    m.def("saveMagSoftIronMatrix",                    [](Device& device)->FullResult{ return saveMagSoftIronMatrix(device); });
    m.def("loadMagSoftIronMatrix",                    [](Device& device)->FullResult{ return loadMagSoftIronMatrix(device); });
    m.def("defaultMagSoftIronMatrix",                 [](Device& device)->FullResult{ return defaultMagSoftIronMatrix(device); });
    m.def("writeConingScullingEnable",                [](Device& device, bool enable)->FullResult{ return writeConingScullingEnable(device, enable); });
    m.def("readConingScullingEnable",                 [](Device& device, bool* enableOut)->FullResult{ return readConingScullingEnable(device, enableOut); });
    m.def("saveConingScullingEnable",                 [](Device& device)->FullResult{ return saveConingScullingEnable(device); });
    m.def("loadConingScullingEnable",                 [](Device& device)->FullResult{ return loadConingScullingEnable(device); });
    m.def("defaultConingScullingEnable",              [](Device& device)->FullResult{ return defaultConingScullingEnable(device); });
    m.def("writeSensor2VehicleTransformEuler",        [](Device& device, float roll, float pitch, float yaw)->FullResult{ return writeSensor2VehicleTransformEuler(device, roll, pitch, yaw); });
    m.def("readSensor2VehicleTransformEuler",         [](Device& device, float* rollOut, float* pitchOut, float* yawOut)->FullResult{ return readSensor2VehicleTransformEuler(device, rollOut, pitchOut, yawOut); });
    m.def("saveSensor2VehicleTransformEuler",         [](Device& device)->FullResult{ return saveSensor2VehicleTransformEuler(device); });
    m.def("loadSensor2VehicleTransformEuler",         [](Device& device)->FullResult{ return loadSensor2VehicleTransformEuler(device); });
    m.def("defaultSensor2VehicleTransformEuler",      [](Device& device)->FullResult{ return defaultSensor2VehicleTransformEuler(device); });
    m.def("writeSensor2VehicleTransformQuaternion",   [](Device& device, const float* q)->FullResult{ return writeSensor2VehicleTransformQuaternion(device, q); });
    m.def("readSensor2VehicleTransformQuaternion",    [](Device& device, float* qOut)->FullResult{ return readSensor2VehicleTransformQuaternion(device, qOut); });
    m.def("saveSensor2VehicleTransformQuaternion",    [](Device& device)->FullResult{ return saveSensor2VehicleTransformQuaternion(device); });
    m.def("loadSensor2VehicleTransformQuaternion",    [](Device& device)->FullResult{ return loadSensor2VehicleTransformQuaternion(device); });
    m.def("defaultSensor2VehicleTransformQuaternion", [](Device& device)->FullResult{ return defaultSensor2VehicleTransformQuaternion(device); });
    m.def("writeSensor2VehicleTransformDcm",          [](Device& device, const float* dcm)->FullResult{ return writeSensor2VehicleTransformDcm(device, dcm); });
    m.def("readSensor2VehicleTransformDcm",           [](Device& device, float* dcmOut)->FullResult{ return readSensor2VehicleTransformDcm(device, dcmOut); });
    m.def("saveSensor2VehicleTransformDcm",           [](Device& device)->FullResult{ return saveSensor2VehicleTransformDcm(device); });
    m.def("loadSensor2VehicleTransformDcm",           [](Device& device)->FullResult{ return loadSensor2VehicleTransformDcm(device); });
    m.def("defaultSensor2VehicleTransformDcm",        [](Device& device)->FullResult{ return defaultSensor2VehicleTransformDcm(device); });
    m.def("writeComplementaryFilter",                 [](Device& device, bool pitchRollEnable, bool headingEnable, float pitchRollTimeConstant, float headingTimeConstant)->FullResult{ return writeComplementaryFilter(device, pitchRollEnable, headingEnable, pitchRollTimeConstant, headingTimeConstant); });
    m.def("readComplementaryFilter",                  [](Device& device, bool* pitchRollEnableOut, bool* headingEnableOut, float* pitchRollTimeConstantOut, float* headingTimeConstantOut)->FullResult{ return readComplementaryFilter(device, pitchRollEnableOut, headingEnableOut, pitchRollTimeConstantOut, headingTimeConstantOut); });
    m.def("saveComplementaryFilter",                  [](Device& device)->FullResult{ return saveComplementaryFilter(device); });
    m.def("loadComplementaryFilter",                  [](Device& device)->FullResult{ return loadComplementaryFilter(device); });
    m.def("defaultComplementaryFilter",               [](Device& device)->FullResult{ return defaultComplementaryFilter(device); });
    m.def("writeSensorRange",                         [](Device& device, SensorRangeType sensor, uint8_t setting)->FullResult{ return writeSensorRange(device, sensor, setting); });
    m.def("readSensorRange",                          [](Device& device, SensorRangeType sensor, uint8_t* settingOut)->FullResult{ return readSensorRange(device, sensor, settingOut); });
    m.def("saveSensorRange",                          [](Device& device, SensorRangeType sensor)->FullResult{ return saveSensorRange(device, sensor); });
    m.def("loadSensorRange",                          [](Device& device, SensorRangeType sensor)->FullResult{ return loadSensorRange(device, sensor); });
    m.def("defaultSensorRange",                       [](Device& device, SensorRangeType sensor)->FullResult{ return defaultSensorRange(device, sensor); });
    m.def("calibratedSensorRanges",                   [](Device& device, SensorRangeType sensor, uint8_t* numRangesOut, uint8_t numRangesOutMax, CalibratedSensorRanges::Entry* rangesOut)->FullResult{ return calibratedSensorRanges(device, sensor, numRangesOut, numRangesOutMax, rangesOut); });
    m.def("writeLowpassFilter",                       [](Device& device, uint8_t descSet, uint8_t fieldDesc, bool enable, bool manual, float frequency)->FullResult{ return writeLowpassFilter(device, descSet, fieldDesc, enable, manual, frequency); });
    m.def("readLowpassFilter",                        [](Device& device, uint8_t descSet, uint8_t fieldDesc, bool* enableOut, bool* manualOut, float* frequencyOut)->FullResult{ return readLowpassFilter(device, descSet, fieldDesc, enableOut, manualOut, frequencyOut); });
    m.def("saveLowpassFilter",                        [](Device& device, uint8_t descSet, uint8_t fieldDesc)->FullResult{ return saveLowpassFilter(device, descSet, fieldDesc); });
    m.def("loadLowpassFilter",                        [](Device& device, uint8_t descSet, uint8_t fieldDesc)->FullResult{ return loadLowpassFilter(device, descSet, fieldDesc); });
    m.def("defaultLowpassFilter",                     [](Device& device, uint8_t descSet, uint8_t fieldDesc)->FullResult{ return defaultLowpassFilter(device, descSet, fieldDesc); });
}
